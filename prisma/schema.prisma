datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String      @id @default(cuid())
    name           String
    email          String      @unique
    emailVerified  DateTime?
    hashedPassword String?
    image          String?
    accounts       Account[]
    sessions       Session[]
    friends        User[]      @relation("UserFriends")
    friends2       User[]      @relation("UserFriends")
    userTrips      UserTrips[]
    messages       Message[]
}

model UserTrips {
    user   User   @relation(fields: [userId], references: [id])
    userId String
    trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
    tripId String
    status String @default("pending")

    @@id([userId, tripId])
}

model Trip {
    id               String            @id @default(cuid())
    name             String
    desc             String?
    dateFrom         DateTime
    dateUntil        DateTime
    pointsOfInterest PointOfInterest[]
    userTrips        UserTrips[]
    messages         Message[]
}

model PointOfInterest {
    id     Int    @id @default(autoincrement())
    tripId String

    name   String
    desc   String?
    status String   @default("pending")
    lat    Decimal?
    lon    Decimal?

    categories Category[]
    trip       Trip       @relation(fields: [tripId], references: [id])
}

model Category {
    id               Int               @id @default(autoincrement())
    name             String
    color            String            @default("#27272A")
    pointsOfInterest PointOfInterest[]
}

model Message {
    id        Int      @id @default(autoincrement())
    tripId    String
    userId    String
    msg       String
    timestamp DateTime
    name      String

    trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
